import { getSubjects } from '@@/services/subject/subject';
import { useAppStore } from '@@/stores/appStore';
import { useRouter } from 'expo-router'; // Th√™m import n√†y
import { useEffect, useState } from 'react';
import { ScrollView, StyleSheet, View } from 'react-native';
import { FeatureGrid } from './FeatureGrid';
import { UserCard } from './UserCard';

// Icons t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng m√¥n h·ªçc theo code
const getIconByCode = (code: string): string => {
  const iconMap: { [key: string]: string } = {
    TOAN_HOC: 'function-variant',
    TIENG_ANH: 'translate',
    LICH_SU: 'history',
    VAT_LY: 'electron-framework',
    HOA_HOC: 'flask',
    SINH_HOC: 'bacteria-outline',
    DIA_LY: 'earth',
    GD_KINH_TE_PHAP_LUAT: 'scale-balance',
    TIN_HOC: 'laptop',
    CONG_NGHE: 'hammer-wrench',
  };

  return iconMap[code] || 'book-outline'; // fallback icon
};

// H√†m l·∫•y m√†u s·∫Øc d·ª±a tr√™n code m√¥n h·ªçc
const getColorByCode = (code: string): string => {
  const colorMap: { [key: string]: string } = {
    TOAN_HOC: '#3C77F7FF', // Xanh d∆∞∆°ng ƒë·∫≠m - logic, ch√≠nh x√°c
    TIENG_ANH: '#07C787FF', // Xanh ng·ªçc - giao ti·∫øp, h·ªôi nh·∫≠p
    LICH_SU: '#B45309', // N√¢u v√†ng ƒë·ªìng - c·ªï k√≠nh, th·ªùi gian
    VAT_LY: '#5F22ECFF', // T√≠m xanh indigo - khoa h·ªçc, kh√°m ph√°
    HOA_HOC: '#DB2777', // H·ªìng ƒë·∫≠m - ph·∫£n ·ª©ng, th√≠ nghi·ªám
    SINH_HOC: '#16A34A', // Xanh l√° - s·ª± s·ªëng, t·ª± nhi√™n
    DIA_LY: '#0EA5E9', // Xanh da tr·ªùi - h√†nh tinh, ƒë·∫°i d∆∞∆°ng
    GD_KINH_TE_PHAP_LUAT: '#DC2626', // ƒê·ªè - nghi√™m t√∫c, lu·∫≠t l·ªá
    TIN_HOC: '#9333EA', // T√≠m - c√¥ng ngh·ªá, s√°ng t·∫°o
    CONG_NGHE: '#F59E0B', // V√†ng cam - ch·∫ø t·∫°o, k·ªπ thu·∫≠t
  };

  return colorMap[code] || '#64748B'; // fallback color (gray)
};

interface Subject {
  _id: string;
  name: string;
  code: string;
  description?: string;
  isActive: boolean;
  isDeleted: boolean;
  order: number;
  createdAt: string;
  updatedAt: string;
}

export function HomeContent() {
  const router = useRouter(); // Th√™m router
  const { currentUser } = useAppStore();

  // State ƒë·ªÉ l∆∞u features t·ª´ API
  const [features, setFeatures] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  // H√†m l·∫•y subjects t·ª´ API v√† chuy·ªÉn ƒë·ªïi th√†nh features
  const fetchSubjects = async () => {
    try {
      setLoading(true);
      const response = await getSubjects({
        page: 1,
        limit: 50, // L·∫•y nhi·ªÅu subjects
        cond: {}, // C√≥ th·ªÉ th√™m ƒëi·ªÅu ki·ªán filter n·∫øu c·∫ßn
      });

      if (response?.statusCode === 200 && response?.data?.result) {
        const subjects: Subject[] = response.data.result;

        // L·ªçc ch·ªâ l·∫•y subjects active v√† kh√¥ng b·ªã x√≥a
        const activeSubjects = subjects.filter(
          (subject) => subject.isActive && !subject.isDeleted,
        );

        // Chuy·ªÉn ƒë·ªïi subjects th√†nh features
        const subjectFeatures = activeSubjects.map((subject) => ({
          key: subject._id,
          label: subject.name,
          color: getColorByCode(subject.code), // M√†u s·∫Øc d·ª±a tr√™n code m√¥n h·ªçc
          icon: getIconByCode(subject.code), // Icon d·ª±a tr√™n code m√¥n h·ªçc
          subjectId: subject._id,
          description: subject.description,
          code: subject.code,
          isActive: subject.isActive,
        }));

        setFeatures(subjectFeatures);
      } else {
        // Fallback v·ªÅ features m·∫∑c ƒë·ªãnh n·∫øu API l·ªói
        setFeatures([]);
      }
    } catch (error: any) {
      console.error('Error fetching subjects:', error);

      // X·ª≠ l√Ω l·ªói theo format API m·ªõi
      if (error.response?.data?.errorDescription) {
        console.error('API Error:', error.response.data.errorDescription);
      } else if (error.response?.data?.message) {
        console.error('API Error:', error.response.data.message);
      }

      // Fallback v·ªÅ features m·∫∑c ƒë·ªãnh khi c√≥ l·ªói
      setFeatures([]);
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi API khi component mount
  useEffect(() => {
    fetchSubjects();
  }, []);

  // T√™n v√† l·ªõp m·∫∑c ƒë·ªãnh trong tr∆∞·ªùng h·ª£p kh√¥ng c√≥ d·ªØ li·ªáu
  const userName = currentUser?.fullName || 'Ch∆∞a c·∫≠p nh·∫≠t';

  // Gi·∫£ s·ª≠ c√≥ tr∆∞·ªùng className trong currentUser, n·∫øu kh√¥ng th√¨ d√πng default
  const userClass = currentUser?.className || 'Ch∆∞a c·∫≠p nh·∫≠t';

  // Th√™m features cho c√°c ch·ª©c nƒÉng qu·∫£n l√Ω ƒë·ªÅ thi
  const managementFeatures = [
    {
      key: 'create-exam',
      label: 'Th√™m m·ªõi',
      color: '#10B981', // Green
      icon: 'plus-circle',
      action: 'create-exam',
    },
    {
      key: 'upload-exam',
      label: 'T·∫£i file',
      color: '#3B82F6', // Blue
      icon: 'cloud-upload',
      action: 'upload-exam',
    },
    {
      key: 'ai-exam',
      label: 'T·∫°o ƒë·ªÅ b·∫±ng AI ',
      color: '#C341FFFF', // Purple
      icon: 'robot',
      action: 'ai-exam',
    },
  ];

  // H√†m x·ª≠ l√Ω khi nh·∫•n v√†o ch·ª©c nƒÉng
  const handleManagementFeature = (action: string) => {
    console.log('Selected management feature:', action);
    // TODO: Implement navigation ho·∫∑c actions cho t·ª´ng ch·ª©c nƒÉng
    switch (action) {
      case 'create-exam':
        // Navigate to create exam screen
        console.log('Navigate to create exam');
        break;
      case 'upload-exam':
        // Navigate to upload exam screen
        console.log('Navigate to upload exam');
        break;
      case 'ai-exam':
        // Navigate to AI exam creation screen
        console.log('Navigate to AI exam creation');
        break;
      default:
        break;
    }
  };

  const handleSubjectPress = (subjectId: string) => {
    const subject = features.find((f) => f.subjectId === subjectId);

    const subjectName = subject?.label || 'ƒê·ªÅ thi';

    const navigationPath = `/exams/${subjectId}?subjectName=${encodeURIComponent(
      subjectName,
    )}`;

    try {
      router.push(navigationPath as any);
    } catch (error) {
      console.log('üî¥ Navigation error:', error);
    }
  };

  return (
    <View style={styles.container}>
      <UserCard
        name={userName}
        className={userClass}
        avatar={currentUser?.avatar}
      />

      <ScrollView
        style={styles.scrollContainer}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        {/* Ch·ª©c nƒÉng qu·∫£n l√Ω */}
        <FeatureGrid
          features={managementFeatures}
          loading={false}
          title="Ch·ª©c nƒÉng"
          onFeaturePress={handleManagementFeature}
        />

        {/* M√¥n h·ªçc */}
        <FeatureGrid
          features={features}
          loading={loading}
          title="ƒê·ªÅ thi theo m√¥n"
          onFeaturePress={handleSubjectPress} // Th√™m d√≤ng n√†y
        />

        <View style={styles.spacer} />
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 16,
    backgroundColor: '#F5F3FF',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20, // Th√™m padding bottom ƒë·ªÉ tr√°nh b·ªã c·∫Øt
  },
  spacer: {
    height: 50, // Thay ƒë·ªïi t·ª´ flex: 1 th√†nh height c·ªë ƒë·ªãnh
    backgroundColor: '#F5F3FF',
  },
});
